// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.bzw.tars.client.tars.tarsgame;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TRespMessage {

	@TarsStructProperty(order = 0, isRequire = true)
	public short nTimeout = 0;
	@TarsStructProperty(order = 1, isRequire = true)
	public int eMsgType = 0;
	@TarsStructProperty(order = 2, isRequire = true)
	public TGameData tGameData = null;

	public short getNTimeout() {
		return nTimeout;
	}

	public void setNTimeout(short nTimeout) {
		this.nTimeout = nTimeout;
	}

	public int getEMsgType() {
		return eMsgType;
	}

	public void setEMsgType(int eMsgType) {
		this.eMsgType = eMsgType;
	}

	public TGameData getTGameData() {
		return tGameData;
	}

	public void setTGameData(TGameData tGameData) {
		this.tGameData = tGameData;
	}

	public TRespMessage() {
	}

	public TRespMessage(short nTimeout, int eMsgType, TGameData tGameData) {
		this.nTimeout = nTimeout;
		this.eMsgType = eMsgType;
		this.tGameData = tGameData;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(nTimeout);
		result = prime * result + TarsUtil.hashCode(eMsgType);
		result = prime * result + TarsUtil.hashCode(tGameData);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TRespMessage)) {
			return false;
		}
		TRespMessage other = (TRespMessage) obj;
		return (
			TarsUtil.equals(nTimeout, other.nTimeout) &&
			TarsUtil.equals(eMsgType, other.eMsgType) &&
			TarsUtil.equals(tGameData, other.tGameData) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(nTimeout, 0);
		_os.write(eMsgType, 1);
		_os.write(tGameData, 2);
	}

	static TGameData cache_tGameData;
	static { 
		cache_tGameData = new TGameData();
	}

	public void readFrom(TarsInputStream _is) {
		this.nTimeout = _is.read(nTimeout, 0, true);
		this.eMsgType = _is.read(eMsgType, 1, true);
		this.tGameData = (TGameData) _is.read(cache_tGameData, 2, true);
	}

}

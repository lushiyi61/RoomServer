// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.bzw.tars.client.tarsgame;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TData {

	@TarsStructProperty(order = 0, isRequire = true)
	public byte[] vecData = null;

	public byte[] getVecData() {
		return vecData;
	}

	public void setVecData(byte[] vecData) {
		this.vecData = vecData;
	}

	public TData() {
	}

	public TData(byte[] vecData) {
		this.vecData = vecData;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(vecData);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TData)) {
			return false;
		}
		TData other = (TData) obj;
		return (
			TarsUtil.equals(vecData, other.vecData) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(vecData, 0);
	}

	static byte[] cache_vecData;
	static { 
		cache_vecData = new byte[1];
		byte var_8 = (byte)0;
		cache_vecData[0] = var_8;
	}

	public void readFrom(TarsInputStream _is) {
		this.vecData = (byte[]) _is.read(cache_vecData, 0, true);
	}

}

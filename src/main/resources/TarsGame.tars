module TarsGame
{
    /////////////////////////游戏的基本数据结构///////////////////////////
    enum E_GAME_MSGID {
        GAMECREATE      = 11,           // 创建游戏 TGameCreate
        GAMESTART       = 12,           // 游戏开始 TGamgStart
        GAMETIMEOUT     = 13,           // 游戏超时 无参数
        GAMEFINISH      = 14,           // 回合结束 无参数
        GAMEOVER        = 15,           // 游戏结束 无参数
        GAMEDISMISS     = 16,           // 游戏解散 无参数
        GAMERESULT      = 17,           // 游戏结果 无参数
        GAMEACTION      = 18,           // 游戏动作 无参数
    };

    /**
    * 创建房间的基础规则在这里增加，
    * 特殊的规则写成json，放进rules里面
    * 必须满足开放性要求，不做具体限制
    */
    struct TGameCreate
    {
        0   require     byte    roomType;       // 房间类型
        10  require     string  rules;          // 房间规则（json to string）
    };

    /*
     * 玩家信息
     */
    struct TPlayerInfo
    {
        0   require     long    userID;         // 玩家ID
        1   require     short   nChairNo;       // 座位号
    };
    /**
    * 游戏开始
    * 当前玩家UID，list下标为座次号
    */
    struct TGamgStart
    {
        0   require     vector<TPlayerInfo>    playerInfo;
    };


    /**
    * 返回的消息类型，决定了数据结构体中有哪些数据
    */
    enum EGameMsgType
    {
        E_NOTIFY_DATA     = 0 ,   // stNotifyData ：给当前座位上的所有玩家发送
        E_RESPONE_DATA    = 1 ,   // stRespOneData ：给指定玩家发送
        E_RESPALL_DATA    = 2 ,   // vecRespAllData ：分别给当前座位上玩家发送
        E_MIXTURE_DATA    = 3 ,   // stNotifyData ：给指定玩家以外其他玩家发送 & stRespOneData ：给指定玩家发送

        E_NONE_DATA      = 10 ,   // 没有数据
    };

    /**
    * 玩家请求游戏动作（子包）
    */
    struct TReqClientMsg
    {
        0 require short nMsgID;            // 游戏指令（玩家提供）
        1 require vector<byte> vecData;    // 消息数据（玩家提供，直接转发）
    };

    /**
    * Room消息
    */
    struct TReqRoomMsg
    {
        0 require short nVer = 1;           // 协议号（每次正式发布数值+1）
        1 require short nMsgID;             // 指令（RoomServer提供） E_GAME_MSGID
        2 require string sTableNo;          // 桌子号  (RoomServer提供）
        3 optional vector<byte> vecData;    // 消息数据（RoomServer提供）
    };

    /**
    * Room 封装后的用户消息
    */
    struct TReqRoomTranspondMsg
    {
        1 require short nMsgID;                 // 指令 TReqClientMsg.nMsgID
        2 require string sTableNo;              // 桌子号   (RoomServer提供）
        3 require short nChairIdx;              // 座位序号 （RoomServer提供）
        4 optional vector<byte> vecData;        // 消息数据 TReqClientMsg.vecData
    };

    /**
    * 玩家接收到的数据（子包）
    */
    struct TData
    {
        0 require short nMsgID;                         // 游戏自定义
        1 require vector<byte> vecData;                 // 一份数据，将vecData发给玩家
    };

    /**
    * 游戏返回数据
    * =======================
    * 根据EGameMsgType取下列数据，详细见枚举说明
    */
    struct TGameData
    {
        0 optional TData tRespOneData;                  // 一份，需推送给请求座位序号
        1 optional TData tNotifyData;                   // 一份，需广播给座位上的玩家
        2 optional TData tNotifyOnlookerData;           // 一份，需广播给非座位上的玩家（旁观者）
        3 optional vector<TData> vecRespAllData;        // N份，需分别发给座位上的玩家
    };

    /**
    * 返回数据
    * nTimeout 0：无动作 >0：更新该桌定时器 <0：销毁该桌定时器
    */
    struct TRespMessage
    {
        0 require short nTimeout = 0;           // 下一状态倒计时
        1 require EGameMsgType  eMsgType;       // 消息类型
        2 require TGameData    tGameData;       // 消息数据
    };


    interface IGameMessage
    {
        /**
        * 通往游戏的协议（单向）
        * @return 0：正常，>0：请求其他指令（该值，消息数据为空）, <0：错误码
        * 错误由Game打印日志输出，RoomServer将忽略
        */
        short doRoomMessage(TReqRoomMsg tReqRoomMsg, out TRespMessage tRespMessage);
        short doClientMessage(TReqRoomTranspondMsg tReqRoomTranspondMsg, out TRespMessage tRespMessage);
    };
};



/**
* 说明
* =========================
* 设计架构
* - GameServer为单向驱动。
* - GameServer采用Map管理N个游戏桌。
* 
* 单向驱动
* - RoomServer组装数据，请求 doGameMessage
*   - TReqMessage 必须指定桌子号，如果是玩家消息，需指定座位序号（默认为-1，是RoomServer的消息）
*   - doGameMessage 返回值
*       - =0： 正常解析TRespMessage
*       - >0： 正常解析TRespMessage，同时将该值作为指令，再次请求 doGameMessage（此时座位号为-1）
*       - <0： 请求错误（忽略&日志......，日志可由GameServer记录）
*
*/
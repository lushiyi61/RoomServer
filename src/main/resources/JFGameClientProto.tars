

/*  
 * @description 定义与终端通讯的消息结构
 * =====================================
 * @author zoujian
 * @date 2018/7/10 14:03
 */
module JFGameClientProto
{

	/*
	 * @description 返回码
	 * =====================================
	 * @author zoujian
	 * @date 2018/7/10 14:06
	 */
	enum E_RETCODE
	{
	    E_COMMON_SUCCESS 		 	= 0,				// 返回成功
	};

    ///////////////////////////////////////////////////////////////////////////////////////////////////
	/*
	 * @description 消息类型
	 * =====================================
	 * @author zoujian
	 * @date 2018/7/10 14:07
	 */
	enum E_MSGTYPE
	{
		E_REQUEST		= 0,			// 请求消息
		E_RESPONSE	    = 1,			// 响应消息
		E_NOTIFY		= 2,			// 通知消息
	};

	/*
	 * @description 消息头
	 * =====================================
	 * @author zoujian
	 * @date 2018/7/10 14:10
	 */
	struct TMsgHead
	{
		0 require short nMsgID;				    // 消息ID
		1 require E_MSGTYPE nMsgType;			// 消息类型
	};

	/*
	 * @description 用户标识
	 * =====================================
	 * @author zoujian
	 * @date 2018/7/10 14:10
	 */
	struct TUid
	{
		0 require	long   	 lUid;
		1 optional   string  sToken;
	};

	/*
	 * @description 通讯包头
	 * =====================================
	 * @author zoujian
	 * @date 2018/7/10 14:11
	 */
	struct TPackage
	{
		0 require 	int 					iVersion;	  		 	// 客户端版本
		1 require 	TUid 					stUid;		   		 	// 用户标识
		2 require	int						iGameID;	   			// 游戏ID
		3 require 	string 					sRoomID;				// RoomID
		4 require	int 					iRoomServerID;	   	 	// RoomServerID
		5 require 	int 					iSequence;	   		 	// 序列号
		6 require 	int 					iFlag;		   		 	// 标志位, 参数PKFLAG定义
		7 require 	vector<TMsgHead> 		vecMsgHead;			 	// 消息头数据
		8 require 	vector<vector<byte>> 	vecMsgData;			 	// 消息体数据
	};

    /*
     * @description 消息处理（来自客户端）
     * =====================================
     * @author zoujian
     * @date 2018/7/10 15:20
     */
    enum E_CLIENT_MSGID
    {
        E_TABLE_ENTER           = 1001,         // 进入/坐下指定桌子
        E_TABLE_LEAVE           = 1002,         // 离开/站起指定桌子
        E_TABLE_RECONNECT       = 1003,         // 重新连接（进入/坐下指定桌子）
        E_TABLE_PREPARE         = 1004,         // 准备
        E_TABLE_DISMISS         = 1005,         // 申请解散桌子
        E_TABLE_VOTE_DISMISS    = 1006,         // 投票解散桌子
        E_TABLE_CHAT_TEXT       = 1007,         // 发送文本&表情（牌桌内）
        E_TABLE_CHAT_AUDIO      = 1008,         // 发送语音（牌桌内）
        E_TABLE_KICK_OUT        = 1009,         // 将某玩家踢出

        E_GAME_ACTION           = 9999,         // 游戏消息
    };

    /*
     * @description 玩家数据
     * =====================================
     * @author zoujian
     * @date 2018/7/11 14:13
     */
    struct TPlayerInfo
    {
		0 require long      lUid;					 	// 玩家ID
		1 require byte      nState;                     // 玩家状态
		2 require byte      nChairNo; 			 		// 所在桌子位置
		3 require string    sNickName;					// 玩家昵称
		4 require string    sPortraitNo;				// 头像编号
		5 require string    sPortraitPath;               // 头像路径
		6 require byte      iSex;					    // 玩家性别 0-未知 1-男 2-女
		7 require string    sIP;						// 玩家IP
    };


    /*
     * @description 进入/坐下指定桌子 请求
     * =====================================
     * @author zoujian
     * @date 2018/7/11 11:17
     */
    struct TMsgReqEnterTable
    {
        0 require   string				sTableNo;			// 桌子编号（全局唯一）
        1 require   string              sSign;              // 签名
        2 require   byte                nRoomType;          // 房间类型
        3 require   byte                nChairNo = 0;       // 指定座位号 0：自动分配
    };

    /*
     * @description 进入/坐下指定桌子 应答&广播
     * =====================================
     * @author zoujian
     * @date 2018/7/11 11:18
     * @iResultID 0-成功 1-sTableNo错误 2-房卡不足 3-人数已满 4-是防作弊房间 5-房间已锁
     */
    struct TMsgRespEnterRoom
    {
        0 require int                       iResultID;	        // 返回结果
        1 require long                      lMasterID;		    // 桌长ID
        2 optional TPlayerInfo              tPlayerInfo;        // 新进来的玩家数据
        3 optional vector<TPlayerInfo>      vecPlayerInfo;     // 本桌已经存在的玩家数据
    };

    /*
     * @description 离开/站起指定桌子 请求
     * =====================================
     * @author zoujian
     * @date 2018/7/11 13:49
     */
    struct TMsgReqLeaveTable
    {
        0 require   string				sTableNo;			// 桌子编号（全局唯一）
    };
    
    /*  
     * @description 离开/站起指定桌子 应答&广播
     * =====================================
     * @author zoujian
     * @date 2018/7/11 13:51
     * @iResultID 0-成功 1-错误
     */
    struct TMsgRespLeaveTable
    {
        0 require   int         iResultID;			 // 返回结果
        1 require   byte         nChairNo; 			 // 所在桌子座位号
    };

    /*
     * @description 重新连接（进入/坐下指定桌子）
     * =====================================
     * @author zoujian
     * @date 2018/7/11 14:07
     */
    struct TMsgReqReconnectTable
    {
        0 require   string				sTableNo;			// 桌子编号（全局唯一）
        1 require   string              sSign;              // 签名
    };

    /*
     * @description 重新连接（进入/坐下指定桌子） 应答&广播
     * =====================================
     * @author zoujian
     * @date 2018/7/11 13:51
     * @iResultID 0-成功 1-游戏已经结束
     */
    struct TMsgRespReconnectTable
    {
        0 require   int         iResultID;			 // 返回结果
        1 require   byte         nChairNo; 			 // 所在桌子座位号
    };


}
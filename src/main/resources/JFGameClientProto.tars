

/*  
 * @description 定义与终端通讯的消息结构
 * =====================================
 * @author zoujian
 * @date 2018/7/10 14:03
 */
module JFGameClientProto
{
    enum E_ROOM_TYPE{
		E_GOLD_COIN		    = 0,			// 金币场
		E_ROOM_CARD	        = 1,			// 房卡场
    };

    /*
     * @description 玩家状态
     * =====================================
     */
    enum E_PLAYER_STATE{
		//////////////////////游戏前/////////////////////////
        E_PLAYER_INITIALIZE		    = 0,			// 玩家初始状态
        E_PLAYER_PREPARE	        = 1,			// 玩家已准备
		//////////////////////游戏中/////////////////////////
		E_PLAYER_PLAYING            = 10,           // 玩家正常游戏中
		E_PLAYER_DISCONNECTED       = 11,           // 玩家掉线了
		E_PLAYER_TRUSTEESHIP        = 12,           // 玩家托管了
    };

	/*
	 * @description 返回码
	 * =====================================
	 * @author zoujian
	 * @date 2018/7/10 14:06
	 */
	enum E_RETCODE
	{
	    E_COMMON_SUCCESS 		 	= 0,				// 返回成功

        E_PROTOCOL_ERROR            = 99,               // 协议错误
        ////////////////////////加入房间错误码/////////////////////////
	    E_TABLE_ENTER_CUT_IN        = 100,              // 玩家中途加入
	    E_TABLE_NOT_EXIST           = 101,              // 房间/游戏桌不存在
	    E_PLAYER_NOT_EXIST          = 102,              // 玩家数据不存在
	    E_GAME_NOT_EXIST            = 103,              // 游戏服务器不存在
	    E_TABLE_NO_ERROR            = 104,              // 房间/游戏桌编号不存在
	    E_TABLE_IS_FULL             = 105,              // 人数已满
	    E_CHAIR_IS_FULL             = 106,              // 座位已满
	    E_SEAT_IS_TAKEN             = 107,              // 该座位有人了
	    E_PLAYER_NOT_SIT            = 108,              // 玩家没有坐下
	    E_PLAYER_IN_ROOM            = 109,              // 玩家在其他房间中


	    E_TABLE_ENTER_ERROR         = 149,              // 加入游戏失败（原因未知）
	    //////////////////////////游戏中的错//////////////////////////
        E_GAME_UNKNOWN_ERROR        = 150,              // 游戏中未知错误

	};

    ///////////////////////////////////////////////////////////////////////////////////////////////////
	/*
	 * @description 用户标识
	 * =====================================
	 * @author zoujian
	 * @date 2018/7/10 14:10
	 */
	struct TUid
	{
		0 require	long   	 lUid;
		1 optional   string  sToken;
	};

	/*
	 * @description 通讯包头
	 * =====================================
	 * @author zoujian
	 * @date 2018/7/10 14:11
	 */
    struct TReqPackage
    {
        0 require 	int 					iVersion = 2;	        // 客户端版本
        1 require 	TUid 					stUid;		   		 	// 用户标识
        2 require	int						iGameID;	   			// 游戏ID
        3 require 	string 					sRoomID;				// RoomID
        4 require	int 					iRoomServerID;	   	 	// RoomServerID
        5 require 	int 					iSequence;	   		 	// 序列号
        6 require 	int 					iFlag;		   		 	// 标志位, 参数PKFLAG定义
        7 require 	vector<short> 		    vecMsgID;			 	// 消息指令
        8 require 	vector<vector<byte>> 	vecMsgData;			 	// 消息体数据
    };

    struct TRespPackage
    {
        0 require 	vector<short> 		    vecMsgID;			 	// 消息指令
        1 require 	vector<vector<byte>> 	vecMsgData;			 	// 消息体数据
    };

    /*
     * @description 消息处理（来自客户端）
     * =====================================
     * @author zoujian
     * @date 2018/7/10 15:20
     */
    enum E_CLIENT_MSGID
    {
        // 遗留问题
        E_MSGID_ADDICT__NOTIFY		= 95,				// 防沉迷消息通知 [S->C]
		E_MSGID_LOGIN_REQ			= 99,				// 登录消息请求 [C->S]

        E_MSGID_TIMEOUT         = 99,                   // S->C 该回合超时时间
		E_MSGID_ERROR           = 100,                  // S->C 返回错误码

        // 新协议 请求&返回 为同一个枚举值，通知为枚举值取负值
        E_TABLE_ENTER           = 101,         // 进入/坐下指定桌子                     // TMsgReqEnterTable
        E_TABLE_LEAVE           = 102,         // 离开/站起指定桌子                     // TMsgReqLeaveTable
        E_TABLE_SIT_DOWN        = 103,         // 坐下指定位置
        E_TABLE_STAND_UP        = 104,         // 站起
        E_PLAYER_DISCONNECT     = 105,         // 玩家断线
        E_START_BY_MASTER       = 110,         // 房主开桌
        E_TABLE_RECONNECT       = 113,         // 重新连接（进入/坐下指定桌子）         // TMsgReqReconnectTable
        E_TABLE_PREPARE         = 114,         // 准备
        E_TABLE_DISMISS         = 115,         // 申请解散桌子
        E_TABLE_VOTE_DISMISS    = 116,         // 投票解散桌子
        E_TABLE_CHAT_TEXT       = 117,         // 发送文本&表情（牌桌内）
        E_TABLE_CHAT_AUDIO      = 118,         // 发送语音（牌桌内）
        E_TABLE_KICK_OUT        = 119,         // 将某玩家踢出

        E_GAME_ACTION           = 222,         // 游戏消息
    };

    /*
     * @description 玩家数据
     * =====================================
     * @author zoujian
     * @date 2018/7/11 14:13
     */
    struct TPlayerInfo
    {
		0 require long      lUid;					 	// 玩家ID
		1 require byte      nState;                     // 玩家状态
		2 require byte      nChairNo; 			 		// 所在桌子位置
		3 require string    sNickName;					// 玩家昵称
		4 require string    sPortraitNo;				// 头像编号
		5 require string    sPortraitPath;              // 头像路径
		6 require byte      iSex;					    // 玩家性别 0-未知 1-男 2-女
		7 require string    sIP;						// 玩家IP
    };


    /*
     * @description 进入/坐下指定桌子 请求
     * =====================================
     * @author zoujian
     * @date 2018/7/11 11:17
     */
    struct TMsgReqEnterTable
    {
        0 require   string				sTableNo;			// 桌子编号（全局唯一）
        1 require   string              sSign;              // 签名
        2 require   byte                nRoomType;          // 房间类型
        3 require   byte                nChairNo = 0;       // 指定座位号 0：自动分配
    };

    /*
     * @description 进入/坐下指定桌子 应答&广播
     * =====================================
     * @author zoujian
     * @date 2018/7/11 11:18
     * @iResultID 0-成功 1-sTableNo错误 2-房卡不足 3-人数已满 4-是防作弊房间 5-房间已锁
     */
    struct TMsgRespEnterTable
    {
        0 require long                      lMasterID;		    // 桌长ID
        1 require vector<TPlayerInfo>      vecPlayerInfo;       // 本桌已经存在的玩家数据
    };

    struct TMsgNotifyEnterTable
    {
        0 optional TPlayerInfo              tPlayerInfo;        // 新进来的玩家数据
    };

    /*
     * @description 离开/站起指定桌子 请求
     * =====================================
     */

    /*
     * @description 离开/站起指定桌子 应答&广播
     * =====================================
     */

    struct TMsgNotifyLeaveTable
    {
        0 require   byte         nChairNo; 			 // 所在桌子座位号
    };


    /*
     * @description 断线通知
     * =====================================
     */
    struct TMsgNotifyDisconnect
    {
        0 require   byte         nChairNo; 			 // 所在桌子座位号
    };

    /*
     * @description 玩家请求坐下
     * =====================================
     */
    struct TMsgReqSitDown
    {
        0 require   byte         nChairNo; 			 // 指定座位号 0：自动分配
    };

    /*
     * @description 坐下桌子 应答&广播
     * =====================================
     */

    struct TMsgNotifySitDown
    {
        0 require   long            lUid;			 // 玩家ID
        1 require   byte         nChairNo; 			 // 所在桌子座位号
    };


    /*
     * @description 玩家请求站起
     * =====================================
     */


    /*
     * @description 站起 应答&广播
     * =====================================
     */
    struct TMsgNotifyStandUp
    {
        0 require   byte         nChairNo; 			 // 所在桌子座位号
    };

    /*
     * @description 重新连接（进入/坐下指定桌子）
     * =====================================
     */

    /*
     * @description 重新连接（进入/坐下指定桌子） 应答&广播
     * =====================================
     */
    struct TMsgRespReconnectTable
    {
        0 require   byte            nChairNo; 			// 所在桌子座位号
        1 require   byte            nState;             // 游戏状态
        2 optional  vector<byte>    vecGameInfo;        // 游戏数据
    };

    struct TMsgNotifyReconnectTable
    {
        0 require   byte         nChairNo; 			 // 所在桌子座位号
    };

    /*
     * @description 玩家准备
     * =====================================
     */
    struct TMsgNotifyPrepare
    {
        0 require   byte         nChairNo; 			 // 所在桌子座位号
    };


    /*
     * @description 通用的占位数据结构（适应无参请求&返回）
     * =====================================
     */
    struct TMsgCommPlaceholder
    {
        0 optional   byte		placeholder = 0;			// 占位，无意义
    };

    /*
     * @description 通用的错误返回数据结构
     * =====================================
     */
    struct TMsgRespErrorCode
    {
        0 require   short         nErrorCode; 			 // 错误码
    };

    /*
     * @description 回合超时（单位：S）
     * =====================================
     */
    struct TMsgNotifyTimeout
    {
        0 require   short         nTimeout; 			 // 超时时间
    };

    //////////////////////////////////历史遗留问题/////////////////////////////////////////////////
	// 防沉迷通知客户端
	struct TMsgRespAddict
	{
		0 require int iRetCode;	         // 防沉迷状态码，成年人无需监控：-1，不满一小时：0，满一小时：1，满2小时：2，以此类推 
	};
};